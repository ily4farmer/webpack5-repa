{
  "extends": [
    "next",
    "next/core-web-vitals",
    "eslint:recommended",
    "plugin:import/recommended",
    "airbnb",
    "airbnb-typescript",
    "prettier",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:typescript-sort-keys/recommended",
    "plugin:storybook/recommended",
  ],
  "overrides": [
    {
      "files": ["*.ts.*"],
      "rules": {
        "simple-import-sort/imports": [
          "error",
          {
            "groups": [
              // Node.js builtins. You could also generate this regex if you use a `.js` config.
              // For example: `^(${require("module").builtinModules.join("|")})(/|$)`
              // Note that if you use the `node:` prefix for Node.js builtins,
              // you can avoid this complexity: You can simply use "^node:".
              [
                "^(assert|buffer|child_process|cluster|console|constants|crypto|dgram|dns|domain|events|fs|http|https|module|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|sys|timers|tls|tty|url|util|vm|zlib|freelist|v8|process|async_hooks|http2|perf_hooks)(/.*|$)",
              ],
              // Packages. `react` related packages come first.
              ["^react", "^@?\\w"],
              // Internal packages.
              ["^@(/.*|$)"],
              // Side effect imports.
              ["^\\u0000"],
              // Path alias imports.
              ["^~."],
              // Parent imports. Put `..` last.
              ["^\\.\\.(?!/?$)", "^\\.\\./?$"],
              // Other relative imports. Put same-folder imports and `.` last.
              ["^\\./(?=.*/)(?!/?$)", "^\\.(?!/?$)", "^\\./?$"],
              // Style imports.
              ["^.+\\.s?css$"],
            ],
          },
        ],
      },
    },
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": ["./tsconfig.json"],
    "sourceType": "module",
  },
  "plugins": [
    "react",
    "prettier",
    "@typescript-eslint",
    "simple-import-sort",
    "sort-keys-fix",
    "sort-destructure-keys",
    "typescript-sort-keys",
  ],
  "rules": {
    "@typescript-eslint/ban-ts-comment": "off",
    "no-param-reassign": "off",
    "consistent-return": "off",
    "react/no-unstable-nested-components": "off",
    "react/no-danger": "off",
    "no-use-before-define": "off",
    "@typescript-eslint/no-use-before-define": "off",
    "no-plusplus": "off",
    "@typescript-eslint/no-unused-expressions": "warn",
    "@typescript-eslint/no-shadow": "warn",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "format": ["camelCase", "PascalCase", "UPPER_CASE"],
        "selector": "variable",
      },
      {
        "format": ["camelCase", "PascalCase"],
        "selector": "function",
      },
    ],
    "react/no-unescaped-entities": "off",
    "import/first": "error",
    "import/newline-after-import": "error",
    "import/no-duplicates": "off",
    "import/no-extraneous-dependencies": "off",
    "import/no-unresolved": "error",
    "import/prefer-default-export": "off",
    "import/order": "off",
    "jsx-a11y/anchor-is-valid": "off",
    "jsx-a11y/click-events-have-key-events": "off",
    "jsx-a11y/label-has-associated-control": "warn",
    "jsx-a11y/no-autofocus": "off",
    "jsx-a11y/no-static-element-interactions": "off",
    "no-duplicate-imports": "error",
    "prettier/prettier": [
      "error",
      {
        "endOfLine": "auto",
      },
    ],
    "react/display-name": "warn",
    "react/function-component-definition": "off",
    "react/react-in-jsx-scope": "off",
    "react/jsx-props-no-spreading": "off",
    "react/no-array-index-key": "off",
    "react/no-unknown-property": "off",
    "react/require-default-props": "off",
    "simple-import-sort/exports": "error",
    "simple-import-sort/imports": "error",
    "sort-destructure-keys/sort-destructure-keys": "error",
    "sort-keys-fix/sort-keys-fix": "error",
  },
  "settings": {
    "import/parsers": {
      "@typescript-eslint/parser": [".ts", ".tsx"],
    },
    "import/resolver": {
      "node": {
        "extensions": [".js", ".jsx", ".ts", ".tsx", ".css", "scss"],
      },
    },
  },
}
